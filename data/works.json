{
	"works" : {
		"major" : 
		[	{
				"name" : "Jonathan Gilmour Homepage",
				"link" : "https://github.com/jonogilmour/jg-homepage",
				"format" : "Individual",
				"languages" : ["Javascript", "HTML5/CSS3", "SASS/SCSS", "JQuery"],
				"technologies" : ["NodeJS", "Handlebars Template Engine", "AngularJS", "JQuery", "Mocha", "ShouldJS", "SuperTest", "Twitter Bootstrap", "Git", "Heroku", "Amazon AWS"],
				"description" : "<p>This website you're currently using was a personal learning exercise that turned into something a lot bigger.</p> <p>I initially started this site as a way to learn NodeJS and try my hand at creating a webserver from the ground up. Then, I decided I would build a website from the ground up on this platform to really showcase my skills at web development, like an online resum√©.</p> <p>Prior to creating this site, I only had experience in Javascript and JQuery - zero NodeJS, zero AngularJS, and not much BDD experience either. In creating this site I set out to accomplish a few goals</p> <ul> <li>Learn a backend framework (Node)</li> <li>Learn a frontend framework (Angular)</li> <li>Learn a testing framework and learn BDD/TDD (Mocha)</li> <li>Become more proficient at the Git command line</li> <li>Learn more about web design and responsive design, using tools like Bootstrap and SASS</li> </ul> <p>In just over a week I was building templates and partials with helpers using Handlebars, adding dynamic routes in Express, and loading data from JSON files to populate web content without writing a single extra line of HTML (this projects section is actually built from JSON), and a whole lot more. I've also had to make sure to adhere to the asynchronous nature of NodeJS (no synchronous calls like <span class=\"pre\">require()</span> in routes, for example).</p> <p>What you see here is built completely from the ground up by myself. I've used Heroku simply to host the site publicly, and I've written every line of code and every HTML template myself. Mobile has been at the forefront of my mind during development, so every change is tested on large devices, like laptops and desktops, and mobile devices, like iPad and iPhone, to ensure that everything is just as usable and presentable on mobile as it is on larger screens. In doing so I've learned an incredible amount about responsive design, and rather than creating separate mobile/desktop sites, the one site simply fits different formats.</p><p>I utilise AWS for serving of images and secure files through S3 and CloudFront. For example, the file containing email authentication information for the contact form on this site is pulled from S3</p><p>I've also made sure to minimise dependency on client-side Javascript, and do as much templating, routing, and data processing as possible on the server-side. Turning off Javascript will not affect the function of the site, simply disabling \"nice-to-haves\" rather than \"must-haves\". All custom CSS is compiled using SASS on the server, utilising mixins, nested selectors, variables, and @media queries, amongst others.</p> <p>During the course of this (ongoing) project, I've fallen further in love with web development, and now enjoy coding the backend just as much as designing the frontend, and the skills I've acquired can be applied to a wealth of other scenarios outside of web development as well.</p>"
			},
			{
				"name" : "RageJump",
				"link" : "https://bitbucket.org/michaeman/ragejumper",
				"format" : "Team (4)",
				"languages" : ["Swift", "Objective-C"],
				"technologies" : ["Xcode", "SpriteKit", "GameCenter", "Interface Builder", "Photoshop", "Trello", "BitBucket", "Git", "LucidChart"],
				"description" : "<p>RageJump is a platform game for iOS that myself and three other students developed at the end of 2014.</p><p>As the final capstone project for my Bachelor of Science (Computing and Software Systems) at the University of Melbourne, the task involved coming up with an idea for a mobile game, then planning, documenting, developing, and presenting the game in a \"startup\" scenario.</p><p>The game is simple in nature, but was a fantastic learning experience with a huge amount of work going into making the game perform well, and be intuitive to play.</p><p>As the Swift programming language had only just been released, we were actually developing the game in a beta version of the software, and had to overcome a lot of problems with Xcode and the APIs we were using, which gradually improved with updates. This also meant that much of the API documentation was in Objective-C, which I had used previously, so I had to do a lot of translating between Objective-C and Swift to know what to do.</p><div class=\"text-center\"><img src=\"{{>rj1.jpg<}}\" alt=\"RageJump progress photo\"/><img src=\"{{>rj2.jpg<}}\" alt=\"RageJump progress photo\"/></div><p>Along with these issues, one member of the team wasn't contributing, so I decided to get the rest of the team organised using Trello, culling any unnecessary features, setting up meetings, and ensuring we had a finished game to present by the deadline. This worked out well, despite the end result not being as full-featured as we had planned initially.</p><p>During the project I further expanded my documentation skills, as we were required to do requirements analysis, use cases, and drawing up plans including component and class diagrams, and wireframes using LucidChart.</p><div class=\"text-center\"><img src=\"{{>rj3.jpg<}}\" alt=\"RageJump progress photo\"/><img src=\"{{>rj4.jpg<}}\" alt=\"RageJump progress photo\"/><img src=\"{{>rj5.jpg<}}\" alt=\"RageJump progress photo\"/></div><p>I personally wrote the majority of the code base, and along the way I had to come up with custom solutions to problems apparent with built in APIs. For example, the swipe gesture used to make the character jump initially used a UIGestureRecognizer. However this introduced problems where some swipes would be ignored, especially when moving the character with another finger, so I had to custom build an entire touch-detection system from the ground up, which fixed the problem and allowed a higher degree of control over the swipe parameters.</p><p>I was also responsible for creating all of the in-game graphics, including the platforms and environment, and in-game menus and buttons, which I made from scratch in Photoshop.</p><p>In the end, I learned a new programming language, a new 2D game API (SpriteKit), and expanded my teamwork and leadership skills, whilst having a lot of fun.</p>"
			},
			{
				"name" : "Ripl",
				"link" : "https://github.com/jonogilmour/RiplGame",
				"format" : "Team (5)",
				"languages" : ["C++"],
				"technologies" : ["Microsoft Visual Studio", "DirectX 11", "Windows 8.1", "XAML", "Trello"],
				"description" : "<p>Ripl is a 3D DirectX 11 game for tablets running Windows 8.1</p><p>The premise of the game is that a \"dam\" on the other side of the map has broken, and your job is to guide pieces of material through the water to plug the hole in the dam before the time expires. If you run into the walls of the course, however, your piece will become stuck and will become an obstacle in itself, and you will have to begin with another piece. Run out of time or pieces, and you lose; move a predetermined number of pieces to the end successfully and you win!</p><p>This project was the first time I had used vanilla DirectX, and it was extremely challenging to learn and then develop a game for the complex API in a matter of weeks.</p><div class=\"text-center\"><img src=\"{{>ripl1.jpg<}}\" alt=\"Ripl progress photo\"/><img src=\"{{>ripl2.jpg<}}\" alt=\"Ripl progress photo\"/><img src=\"{{>ripl3.jpg<}}\" alt=\"Ripl progress photo\"/><img src=\"{{>ripl4.jpg<}}\" alt=\"Ripl progress photo\"/><img src=\"{{>ripl5.jpg<}}\" alt=\"Ripl progress photo\"/></div><p>My responsibilities included writing the bulk of the code base (shaders, render pipeline, buffer formation, etc.), organising the team to ensure everyone was pitching in and working to deadlines, making sure the Trello boards were updated and each team member regularly updated others with their progress, and ensuring each person had something to work on.</p><p>Out of the five team members, I was the only one with a lot of C++ experience, so I took on the jobs of</p><ul><li>Learning how to code shaders in HLSL</li><li>Writing the lighting shader code for Phong illumination</li><li>Setting up the original code base</li><li>Ensuring that other members' algorithms were integrated with the render pipeline</li><li>Writing all vertex/index buffer creation and manipulation code</li><li>Writing the camera movement algorithms</li><li>Programming the game logic, including win/loss scenarios and all scripted sequences</li><li>Writing all of the matrix calculation code</li></ul><p>On top of all this, I had to port all the code from VS 2013 to VS 2012 to fit with the requirements, and then port the changed code back into VS 2013 when the requirements were altered. This was also a massive job as the technologies changed between 2012 and 2013 so it involved a huge amount of refactoring and changing of the code to comply with each version.</p><p>I also wrote all of the controls, which involved responding to movement from the accelerometer to move the cube from one end of the map to the other without hitting the walls of the course, and wrote the code that formed the map, which was imported from a heightmap bmp.</p><p>Overall I found this to be an incredibly rewarding experience, and to see a finished game result from a lot of hard work was great. This project also greatly expanded my understanding of how 3D games are actually made, and allowed me to appreciate the huge amount of work that goes into 3D game development (and what can go wrong in the process).</p>"
			},
			{
				"name" : "Club-Bizz",
				"link" : "https://github.com/majames/club_bizz",
				"format" : "Team (3)",
				"languages" : ["Ruby on Rails", "CSS3", "HTML5", "Javascript", "JQuery"],
				"technologies" : ["Git", "Bootstrap", "SQLite", "Trello", "SASS/SCSS"],
				"description" : "<p>This project was developed as a solution to a problem with university clubs and how they communicate with their members. In essence, it is a sort of social hub for club creators and members to interact with each other.</p><p>The initial process involved coming up with a design for the site and setting out all of the initial plans and diagrams. We used Rails to develop the app itself and SQL to store the data, and HTML5 and CSS3 to display and style all of the information. Javascript was used sparingly to add some cool features, like a randomised \"Hello\" message when you visited your profile page.</p><div class=\"text-center\"><img src=\"/{{>cb1.jpg<}}\" alt=\"Club Biz Photo\" /><img src=\"/{{>cb2.jpg<}}\" alt=\"Club Biz Photo\" /><img src=\"/{{>cb3.jpg<}}\" alt=\"Club Biz Photo\" /><img src=\"/{{>cb4.jpg<}}\" alt=\"Club Biz Photo\" /></div><p>My main job was to design and style the site, aid the other team members with the Ruby code, and writing the Javascript/JQuery.</p><p>I used CSS3 (in SASS) heavily throughout the entire app, using advanced techniques like:</p><ul><li>Creating dynamically generated backgrounds that did not rely on images for rendering</li><li>Styling text using insets, offset shadows, and subtle colour techniques</li><li>Utilising cross-browser compatibility methods to ensure consistency across platforms</li><li>Integrating custom fonts for icons (eg Fontello) and other symbols instead of relying on images</li></ul><p>We decided to go with a \"candy\" theme, with bright colours, striped backgrounds, and integrated features like thorough form authentication, social media plugins, user commenting, Gravatar icons, and more.</p><p>This project sparked a serious interest in web design, and also gave me experience in responsive design, server development, and UI/UX design.</p>"
			}	],
		"minor":
		[	{
				"name" : "Untapped Wines Grid Generator",
				"link" : "http://webapps.untappedwines.net/grid-gen/index.html",
				"format" : "Individual",
				"languages" : ["Javascript", "HTML/CSS"],
				"technologies" : ["AngularJS", "Bootstrap"],
				"description" : "<p>I developed this simple webapp in response to a problem where others in the business would try to add to pages on the Untapped Fine Wines retail website. In order to preserve the layout of certain pages, HTML would have to be directly pasted into the WYSIWYG editor, which was problematic as other employees were not versed in HTML.</p><div class=\"col-xs-12 text-center\"><img class=\"col-md-8 col-md-offset-2 text-center\" src=\"media/jg-ufwgg.png\" alt=\"Untapped Fine Wines Grid Picture 1\" /><img class=\"col-md-8 col-md-offset-2 text-center\" src=\"media/jg-ufwgg-2.png\" alt=\"Untapped Fine Wines Grid Picture 2\" /></div><p>Coded in AngularJS, two-way binding automatically fills a rendered representation of an event, a contact, or a news article entry, along with the bare HTML from a form. Clicking on the HTML selects it, allowing the user to simply copy and paste the HTML into the WYSIWYG editor, preventing any strange formatting errors and alleviating any confusion with the markup.</p><p>I also employed responsive design principles (Bootstrap) to ensure the page is still fully functional on mobile devices as well</p>"
			},
			{
				"name" : "Random Fractal Landscape Generator",
				"link" : "https://github.com/jonogilmour/jgilmour-fractal-terrain",
				"format" : "Individual",
				"languages" : ["C#"],
				"technologies" : ["DirectX", "XNA", "SharpDX", "Microsoft Visual Studio"],
				"description" : "<p>This project was my first foray into 3D graphics.</p><p>This application is coded in C# and utilises the Diamond-Square algorithm to randomly generate a fractal landscape, which means you get a completely new landscape with each run. The landscape is coloured to resemble mountains, valleys, and lakes, depending on the height of the vectors. A single plane of semi-transparent water sits underneath to give a more realistic appearance as well.</p><p>As well as the landscape, a sunset/sunrise effect loops, utilising the Blinn-Phong illumination model and a directional light to give realistic reflections on the landscape.</p><p>Camera controls were also implemented to allow the user to use the mouse and keyboard to move the camera around the landscape to see it from different angles.</p><p>The lighting was challenging to get right. A point light source would have made for a realistic \"sun\", but coding a point light was beyond the scope of the project. So I had to make do with a directional light, but as only an angle, not a position, can be set on a directional light, I had to get creative.</p><p>Given that I could not move the light around the landscape, like a sun, I instead opted to move the entire landscape around the light, as shown below.</p><img src=\"\"/><p>This also meant I had to move the camera (aka the world) in order to keep it in the same position relative to the landscape. This was a novel solution that meant the lighting was realistic, without a significant frame-rate drop</p><p>I learned a lot about vectors, LH and RH winding, lighting, and transformation matrices from this project, which has greatly improved my understanding of game design and computer graphics.</p>"
			},
			{
				"name" : "Jonathan Gilmour Photography",
				"link" : "https://github.com/jonogilmour/jgilmour-fractal-terrain",
				"format" : "Individual",
				"languages" : ["C#"],
				"technologies" : ["DirectX", "XNA", "SharpDX", "Microsoft Visual Studio"],
				"description" : "<p>This project was my first foray into 3D graphics.</p><p>This application is coded in C# and utilises the Diamond-Square algorithm to randomly generate a fractal landscape, which means you get a completely new landscape with each run. The landscape is coloured to resemble mountains, valleys, and lakes, depending on the height of the vectors. A single plane of semi-transparent water sits underneath to give a more realistic appearance as well.</p><p>As well as the landscape, a sunset/sunrise effect loops, utilising the Blinn-Phong illumination model and a directional light to give realistic reflections on the landscape.</p><p>Camera controls were also implemented to allow the user to use the mouse and keyboard to move the camera around the landscape to see it from different angles.</p><p>The lighting was challenging to get right. A point light source would have made for a realistic \"sun\", but coding a point light was beyond the scope of the project. So I had to make do with a directional light, but as only an angle, not a position, can be set on a directional light, I had to get creative.</p><p>Given that I could not move the light around the landscape, like a sun, I instead opted to move the entire landscape around the light, as shown below.</p><img src=\"\"/><p>This also meant I had to move the camera (aka the world) in order to keep it in the same position relative to the landscape. This was a novel solution that meant the lighting was realistic, without a significant frame-rate drop</p><p>I learned a lot about vectors, LH and RH winding, lighting, and transformation matrices from this project, which has greatly improved my understanding of game design and computer graphics.</p>"
			}	]
	}
	
}